---
title: "Assignment_week2"
format: 
    html: 
    theme: cosmo
    toc: true
    embed-resources: true
  pdf:
    colorlinks: true
editor: visual
author: "Rachel Kaufman"
date: "2023-09-07"
mainfont: "Georgia"
---

## Homework 2: dplyr

#### Loading Packagages

```{r, echo = FALSE}
library(nycflights13)
library(tidyverse)
library(modelsummary)
library(flextable)
library(tinytex)

```

##### Y4.2.5: all six exercises

refamiliarizing myself with the data

```{r}
View(flights)
```

Q1: In a single pipeline for each condition, find all flights that meet the conditions:

-   Had an arrival delay of two or more hours
-   Flew to Houston (IAH or HOU) *filter()*
-   Were operated by United, American, or Delta
-   Departed in summer (July, August, and September)
-   Arrived more than two hours late, but didn't leave late *filter*
-   Were delayed by at least an hour, but made up over 30 minutes in flight

```{r}
flights4Q1 <-  flights |> 
  filter(arr_delay >= 120) |> 
  filter(dest == "IAH" & dest == "HOU") |> 
  filter(carrier == "UA" & carrier == "AA" & carrier == "DL") |> 
  filter(month %in% c(7:9)) |> 
  filter(dep_delay <= 0) |> 
  filter(dep_delay >= 60 & air_time > 30)
  
library(tidyverse)
library(nycflights13)

 flights %>%
  filter(
    arr_delay >= 120,                     
    dest %in% c("IAH", "HOU"),            
    carrier %in% c("UA", "AA", "DL"), 
    month %in% c(7, 8, 9),      
    arr_delay > 120 & dep_delay <= 0,   
    dep_delay >= 60 & air_time > 30)

```

##### Q2: Sort flights to find the flights with longest departure delays. Find the flights that left earliest in the morning.

```{r}
flights |> 
  arrange(desc(dep_delay), dep_time) 

flights |> 
  arrange(dep_time)  
  
```

*in a single pipe, this seems weird. Is the* `arrange` *function actually sorting both? i am assuming it defaults to arranging by dep_delay and then when that has a repeatable value then it arranges those by dep_time.*

##### Q3: Sort flights to find the fastest flights. (Hint: Try including a math calculation inside of your function.)

```{r}
flight_speed <- flights |> 
  mutate(speed = distance / air_time) |> 
  arrange(desc(speed))

head(fastest_flights)
```

##### Q4: Was there a flight on every day of 2013?

```{r}
flights |> 
  drop_na() |> 
  distinct(month, day)
  
```

Yes! prints 365 rows *is there a better way to do this?*

##### Q5: Which flights traveled the farthest distance? Which traveled the least distance?

```{r}
flights |> 
  distinct()
  arrange(desc(distance)) |> 
  select(month, day, flight, origin, dest, distance) |> 
  head()

flights |> 
  distinct() |> 
  arrange(distance) |> 
  select(month, day, flight, origin, dest, distance) |> 
  head()
```

##### Q6: Does it matter what order you used filter() and arrange() if you're using both? Why/why not? Think about the results and how much work the functions would have to do.

YES! Def matters. Take this for example:

```{r}
# Arrange the entire dataset based on departure delay
arranged_flights <- flights %>%
  arrange(dep_delay) %>%
  filter(origin == "JFK", dep_delay > 60)

#Filtering to select flights from JFK that were delayed an hour +
filter_flight <- flights |> 
  filter(origin == "JFK", dep_delay)
```

*when do we use `&` within dplyr functions? i assumed instead of a comma i should have done `&` ... obviously, the comma is what worked...is `&` for when you want to combine two conditions within a single pipe function?*

### 4.3.5: all seven exercises

##### Q1: Compare dep_time, sched_dep_time, and dep_delay. How would you expect those three numbers to be related?

```{r}
flights |> 
  select(dep_time, sched_dep_time, dep_delay)
```

##### Q2: Brainstorm as many ways as possible to select dep_time, dep_delay, arr_time, and arr_delay from flights.

```{r}
flights |> 
  select(dep_time, dep_delay, arr_time, arr_delay)

flights |> 
  relocate(sched_arr_time, sched_dep_time) |> 
  select(c(6:9))

flights |> 
  relocate(sched_arr_time, sched_dep_time) |> 
  select(dep_time:arr_delay)

flights |> 
  select(starts_with("dep"), starts_with("arr"),
         ends_with("delay"), ends_with("time")) |> 
  select(!c(5:7))
  

```

Alright that is all my brains got rn.

##### Q3: What happens if you specify the name of the same variable multiple times in a select() call?

```{r}
flights |> 
  select(arr_time, carrier, carrier, dep_time, carrier)
```

it does it only once!

##### Q4: What does the any_of() function do? Why might it be helpful in conjunction with this vector?

```{r}
flights |> 
  select(any_of("dep_time"))

flights |> 
  select(!any_of("dep_time"))

flights |> 
  select(dep_time)
```

SO, it is supposed to be helpful for removing variables from the data set. So likely my NA's... *Question... why do we need quotes here inside any_of? Also why when I addded the ! it like didn't do anything? or it did and I cannot tell?*

##### Q5: Does the result of running the following code surprise you? How do the select helpers deal with upper and lower case by default? How can you change that default?

```{r}
flights |> select(contains("TIME"))

flights |> 
  select(contains("TIME", ignore.case = FALSE))

```

Yes surprised me because its in all caps and it was still working! Looked at the definition page shows us that we would `ignore.case = FALSE`

##### Q6: Rename air_time to air_time_min to indicate units of measurement and move it to the beginning of the data frame.

```{r}
flights |> 
  mutate(air_time_min = air_time) |> 
  relocate(air_time_min)
```

##### Q7:Why doesn't the following work, and what does the error mean?

```{r, echo = FALSE}
flights |> 
  select(tailnum) |> 
  arrange(arr_delay)
#> Error in `arrange()`:
#> â„¹ In argument: `..1 = arr_delay`.
#> Caused by error:
#> ! object 'arr_delay' not found
```

Well because you selected tailnum that tells the next pipe that `tailnum` is the only column available to look at within the line of code!

### 4.5.7: all six exercises

##### Q1:Which carrier has the worst average delays? Challenge: can you disentangle the effects of bad airports vs. bad carriers? Why/why not? (Hint: think about flights \|\> group_by(carrier, dest) \|\> summarize(n()))

```{r}
flights |> 
  drop_na() |> 
  select(carrier, dep_delay) |> 
  group_by(carrier) |> 
  summarise(delay_min = mean(dep_delay))

View(flights)
```

tbh this whole hint thing confused me even more than the wording of the OG question. Wait the hint is for the challenge... jk. okay worst average delays that means i want to look at average delay depart time, group by carrier

##### Q2: Find the flights that are most delayed upon departure from each destination.

```{r}
flights |> 
  select(dep_delay, carrier, dep_time) |> 
  arrange(desc(dep_delay)) |> 
  head()
  
```

okay this one is depart delay and *is the top value supposed to be 1301 minutes?*

##### Q3: How do delays vary over the course of the day. Illustrate your answer with a plot.

```{r}
 

# Combine hour and minute columns to create a new variable 'time'
flights <- flights  |> 
  mutate(time = hour * 60 + minute)

# Create a scatterplot using ggplot2
ggplot(flights, aes(x = time, y = dep_delay)) +
  geom_point(alpha = 0.2) +  # Use alpha to add transparency for better visibility
  labs(x = "Time of Day (in minutes)", y = "Departure Delay (minutes)") +
  ggtitle("Departure Delays Over the Course of the Day")

```

This plot is kinda shitty looking. Could fix it but idk I am tired, guessing we will do proper plot work \@ a later date.

##### Q4: What happens if you supply a negative n to slice_min() and friends?

```{r}
 flights  |> 
  select(slice_min(dep_delay, n = 1))

flights |> 
  select(slice_max(dep_delay, n = 1))

```

Not good things-- So I am guessing that they have specific meanings for the negative. turns out that `slice_max()` goes with the smallest value... and for slice_min() it will select the rows w the largest values... wonky? am i reading these rights?

##### Q5: Explain what count() does in terms of the dplyr verbs you just learned. What does the sort argument to count() do?

```{r}
flights |> 
  count(origin, dest, sort = TRUE)

flights |> 
  count(origin, dest, sort = FALSE)
```

##### Q6:

Suppose we have the following tiny data frame:

```{r}
df <- tibble(
  x = 1:5,
  y = c("a", "b", "a", "a", "b"),
  z = c("K", "K", "L", "L", "K")
)
```

a.  Write down what you think the output will look like, then check if you were correct, and describe what group_by() does.

```{r}
df |>
  group_by(y)
```

I mean there is not much to group by... so unsure if there would be a change, and that seems okay! these isnt anything after the group_by so kinda unimportant

b.  Write down what you think the output will look like, then check if you were correct, and describe what arrange() does. Also comment on how it's different from the group_by() in part (a)?

```{r}
df |>
  arrange(y)
```

so this should put the order of a in the alphabet for the y column-- it is different because its ordered with the alphabet. the X when you do this however (in comparison to part a) does not move around with the Y... the arrangement of Y does not not change the order of x's vector.

c.  Write down what you think the output will look like, then check if you were correct, and describe what the pipeline does.

```{r}
df |>
  group_by(y) |>
  summarize(mean_x = mean(x))
```

should show the means for groups of y, so `a` and `b` should be separated...so when you group by y and pipe into another argument it tells you how to separate and group the means of our variable x's rows! I was correct cool.

d.  Write down what you think the output will look like, then check if you were correct, and describe what the pipeline does. Then, comment on what the message says.

```{r}
df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x))
```

well so when you group by 2 variables this means we will see additional like subgroup things... so y should be grouped first then group by Z! Looking at it: It will group by Y for all cases first, then group by Z.

e.  Write down what you think the output will look like, then check if you were correct, and describe what the pipeline does. How is the output different from the one in part (d).

```{r}
df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x), .groups = "drop")

```

Honestly, *I do not understand this* I see that `.groups` when = "drop" leads to droping the order that we passed through in the previous pipe. This is evident in the light grey area where it mentions being grouped by y in part d, It's likely that a more notable difference would arise if my tibble had more data.

f.  Write down what you think the outputs will look like, then check if you were correct, and describe what each pipeline does. How are the outputs of the two pipelines different?

```{r}
df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x))

df |>
  group_by(y, z) |>
  mutate(mean_x = mean(x))
```

OH well summarize and mutate will do different things... mutate will lead to a new column for the mean_x that can be safed onto the df. Summarize does give you the same results but ya know... Okay now that I have ran the lines: When you mutate it separates the y and z subgroups when in the first line of code with summarize it just takes grouping by Y (overriding the argument that there are 2 variables to group by, y and z).
